#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, os, argparse
from PyQt5 import QtWidgets
import sip

def _ensure_embedded_rviz_py_on_path():
    try:
        import embedded_rviz_py  # noqa
        return
    except Exception:
        pass
    try:
        from ament_index_python.packages import get_package_prefix
        prefix = get_package_prefix('embedded_rviz')
        libdir = os.path.join(prefix, 'lib', 'embedded_rviz')
        if libdir not in sys.path:
            sys.path.insert(0, libdir)
    except Exception as e:
        print(f"[embedded_rviz] WARN: ament_index lookup failed: {e}", file=sys.stderr)

_ensure_embedded_rviz_py_on_path()
from embedded_rviz_py import create, destroy, qwidget_ptr

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--rviz-config", default="", help="Pfad zu .rviz (optional)")
    ap.add_argument("--node-name",  default="embedded_rviz_panel", help="ROS Node name")
    args = ap.parse_args()

    app = QtWidgets.QApplication(sys.argv)

    rid, _ = create(args.node_name, args.rviz_config)

    ptr = qwidget_ptr(rid)
    if not ptr:
        raise RuntimeError("embedded_rviz: qwidget_ptr() lieferte 0")
    rviz_widget = sip.wrapinstance(int(ptr), QtWidgets.QWidget)

    win = QtWidgets.QWidget()
    win.setWindowTitle("Embedded RViz (PyQt)")
    lay = QtWidgets.QVBoxLayout(win)
    lay.setContentsMargins(0, 0, 0, 0)
    lay.addWidget(rviz_widget)
    win.resize(1100, 700)
    win.show()

    app.aboutToQuit.connect(lambda: destroy(rid))
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
